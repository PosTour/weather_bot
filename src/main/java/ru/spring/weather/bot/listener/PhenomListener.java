package ru.spring.weather.bot.listener;

import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.SneakyThrows;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.spring.weather.bot.dto.NotificationDto;
import ru.spring.weather.bot.flow.EntryBot;
import ru.spring.weather.bot.flow.command.Command;

@RequiredArgsConstructor
@Component
public class PhenomListener {
    private final EntryBot telegramBot;
    private final Logger logger = LoggerFactory.getLogger(Command.class);
    private final ObjectMapper objectMapper;

    @SneakyThrows
    @KafkaListener(topics = "${spring.kafka.consumer.topic}", groupId = "${spring.kafka.consumer.group-id}")
    public void onMessage(ConsumerRecord<String, String> payload) {
        NotificationDto notification = objectMapper.readValue(payload.value(), NotificationDto.class);

        String message;
        switch (notification.phenomType()) {
            case("Clear") -> message = "–ó–∞–≤—Ç—Ä–∞ –≤ " + notification.city() + " –æ–∂–∏–¥–∞–µ—Ç—Å—è —è—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞ ‚òÄÔ∏è";
            case("Hail") -> message = "–ó–∞–≤—Ç—Ä–∞ –≤ " + notification.city() + " –æ–∂–∏–¥–∞–µ—Ç—Å—è –≥—Ä–∞–¥. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã ‚ùÑÔ∏èüí¶";
            case("Overcast") -> message = "–ó–∞–≤—Ç—Ä–∞ –≤ " + notification.city() + " –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–∞—Å–º—É—Ä–Ω–∞—è –ø–æ–≥–æ–¥–∞ üå•Ô∏è";
            case("Rain") -> message = "–ó–∞–≤—Ç—Ä–∞ –≤ " + notification.city() + " –æ–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ–∂–¥—å. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–æ–Ω—Ç üåßÔ∏è";
            case("Showers") -> message = "–ó–∞–≤—Ç—Ä–∞ –≤ " + notification.city() + " –æ–∂–∏–¥–∞—é—Ç—Å—è –ª–∏–≤–Ω–∏. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–æ–Ω—Ç ‚õàÔ∏è";
            case("Sleet") -> message = "–ó–∞–≤—Ç—Ä–∞ –≤ " + notification.city() + " –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–ª—è–∫–æ—Ç—å ‚ùÑÔ∏èüíß";
            case("Snow") -> message = "–ó–∞–≤—Ç—Ä–∞ –≤ " + notification.city() + " –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤—ã–ø–∞–¥–µ–Ω–∏–µ —Å–Ω–µ–≥–∞ üå®Ô∏è";
            case("Thunderstorm") -> message = "–ó–∞–≤—Ç—Ä–∞ –≤ " + notification.city() + " –æ–∂–∏–¥–∞–µ—Ç—Å—è –≥—Ä–æ–∑–∞ üå©Ô∏è";
            default -> {
                logger.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–≥–æ–¥–Ω–æ–µ —è–≤–ª–µ–Ω–∏–µ");
                return;
            }
        }

        var sendMessage = new SendMessage(
                Long.toString(notification.chatId()), message);

        try {
            telegramBot.send(sendMessage);
        } catch (TelegramApiException e) {
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
        }
    }
}
